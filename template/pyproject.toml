[tool.pyright]
exclude = ["**/node_modules", "**/__pycache__", "**/.*", "submodules"]
stubPath = "submodules/typings"
typeCheckingMode = "strict"
# Default "true" in strict
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
disableBytesTypePromotions = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
# Default "false" in strict
deprecateTypingAliases = false
enableExperimentalFeatures = false
# Default "warning" in strict
reportMissingModuleSource = "warning"
# Default "error" in strict
reportMissingImports = "warning"
reportUndefinedVariable = "warning"
reportAssertAlwaysTrue = "warning"
reportInvalidStringEscapeSequence = "warning"
reportInvalidTypeVarUse = "warning"
reportMissingTypeStubs = "none"                # Overeager
reportSelfClsParameterName = "warning"
reportUnsupportedDunderAll = "warning"
reportUnusedExpression = "none"                # Handled by Ruff
reportWildcardImportFromLibrary = "warning"
reportGeneralTypeIssues = "warning"
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportTypedDictNotRequiredAccess = "warning"
reportPrivateImportUsage = "warning"
reportUnboundVariable = "warning"
reportUnusedCoroutine = "none"                 # Handled by Ruff
reportFunctionMemberAccess = "warning"
reportIncompatibleMethodOverride = "warning"
reportIncompatibleVariableOverride = "warning"
reportOverlappingOverload = "warning"
reportConstantRedefinition = "none"
reportDeprecated = "warning"
reportDuplicateImport = "warning"
reportIncompleteStub = "warning"
reportInconsistentConstructor = "warning"
reportInvalidStubStatement = "warning"
reportMatchNotExhaustive = "warning"
reportMissingParameterType = "none"
reportMissingTypeArgument = "warning"
reportPrivateUsage = "none"                    # Ruff checks this well enough
reportTypeCommentUsage = "warning"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnusedClass = "none"                     # Handled by Ruff
reportUnusedImport = "none"                    # Handled by Ruff
reportUnusedFunction = "none"                  # Handled by Ruff
reportUnusedVariable = "none"                  # Handled by Ruff
reportUntypedBaseClass = "none"
reportUntypedClassDecorator = "warning"
reportUntypedFunctionDecorator = "none"        # Often out of our control
reportUntypedNamedTuple = "warning"
# Default "none" in strict
reportCallInDefaultInitializer = "none"
reportImplicitOverride = "none"
reportImplicitStringConcatenation = "none"
reportImportCycles = "none"
reportMissingSuperCall = "none"
reportPropertyTypeMismatch = "none"
reportShadowedImports = "none"
reportUninitializedInstanceVariable = "warning" # Ensure we define instance vars
reportUnnecessaryTypeIgnoreComment = "none"
reportUnusedCallResult = "none"

[tool.ruff]
target-version = "py311"
cache-dir = ".cache/.ruff_cache"
extend-exclude = ["submodules"]
extend-include = ["*.ipynb"]
fix = true
force-exclude = true
show-fixes = true
show-source = true
preview = false
unsafe-fixes = false
fixable = ["ALL"]
select = ["ALL"]
extend-ignore = [
    "ANN",     # Don't require type annotations
    "ARG005",  # Allow unused lambda argument. For consistency across df pipelines.
    "C408",    # Allow dict calls
    "COM",     # Allow magic commas and magic missing commas
    "CPY001",  # Don't check for copyright
    "D10",     # Missing docstrings
    "D20",     # Don't reformat docstrings in these ways
    "D213",    # Multi-line docstring summary should start at the second line
    "D402",    # False positives for parens in first line
    "D412",    # Allow blanks below headers in Google-style docstrings
    "DTZ",     # Timezones are important, but only contextually necessary.
    "E501",    # Don't check line length. Black handles this.
    "EM",      # Don't check for exception message issues
    "ERA",     # False positives. Don't get rid of commented out code.
    "FBT",     # Allow boolean "traps"
    "FIX002",  # Allow TODOs
    "FLY002",  # Allow different string representations
    "G0",      # Allow f-strings, etc. in Loguru logging
    "INP001",  # False positives. Checks for packages missing `__init__.py`
    "ISC",     # False positives. Implicit string concatenation is fine.
    "PD013",   # Allow `stack` instead of `melt`. They're not a direct swap.
    "PD101",   # Allow use of nunique(). False positives
    "PD901",   # Allow `df` variable name. We are all consenting adults here.
    "PD011",   # Allow use of `.values`. False positives.
    "PGH003",  # Until black stops wrapping special ignores, let's allow bare
    "PIE804",  # Allow dict unpack even if unnecessary, consisent for df.assign{**...}
    "PLR0913", # Allow more than five function arguments
    "PLR2004", # Allow magic values. This check is too sensitive
    "PLW2901", # For loop variable
    "RET",     # Return checks are flaky, Sourcery does fine analysing these paths
    "S301",    # Don't warn about pickling. Allow me to shoot myself in the foot.
    "TCH",     # Type checking linter doesn't play nicely with pydantic
    "TD",      # Disable to-do validation. Too pedantic for now.
    "TRY003",  # Allow long exception messages
    "W2",      # Allow whitespace issues. Fixed automatically by black.
]

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.extend-per-file-ignores]
"**/*.ipynb" = [
    "B018", # Allow "useless" expressions, which do suppress outputs in notebooks
    "F821", # Allow undefined names, such as `display`
    "S101", # Allow assert
    "T201", # Allow print in notebooks
]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["typer.Argument", "typer.Option"]
